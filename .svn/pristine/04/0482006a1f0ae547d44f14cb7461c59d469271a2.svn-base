<?php
/**
 * Created by PhpStorm.
 * User: crosstime
 * Date: 2017/10/12
 * Time: 上午11:57
 */
namespace common\server\RecallPlan;


use common\base\BasicServer;
use common\model\db_customer\RecallCodeGroup;
use common\server\Statistic\GameProductServer;
use common\server\Vip\LossUserServer;
use common\server\Platform\{Platform};
use common\server\Vip\RecallServer;
use common\libraries\{ApiUserInfoSecurity, Common, SendNuoer};

use common\sql_server\{RecallPlanLogSqlServer, RecallPlanPeopleLogSqlServer, RecallPlanSqlServer};
use think\Config;


class RecallPlanServer extends BasicServer
{

    //根据计划表写入计划记录表
    public static function executeLossPlan($params)
    {
        $result = ['code'=>1, 'data'=>[]];

        //
        $where = ['status'=>1,'execute_type'=>1];
        $res = RecallPlanSqlServer::getInfo($where);
        $res = isset($res) ? $res->toArray() : [];

        foreach($res as $k=>$v){

            $tmp_data = self::dealParams($v);

            $res = RecallPlanLogSqlServer::insertInfo($tmp_data);
            $return_arr['data'][$v['id']] = $res;
        }
        $result['data'] = $return_arr;
        return $result;

    }


    //根据计划记录表写入计划记录明细表
    public static function executeLossPlanLog($params)
    {
        $result = ['code'=>1, 'data'=>[]];

        $where = ['status'=>1,'execute_type'=>1];
        $plan_logs = RecallPlanLogSqlServer::getInfo($where);

        $ins_res = false;
        foreach($plan_logs as $k=>$v)
        {
            //筛选符合计划的用户
            $res = LossUserServer::screenUids($v);

            if(!empty($res)){

                RecallPlanPeopleLogSqlServer::insertInfo($v['id'],$res);

            }

        }

        return $result;

    }


    public static function dealParams($data)
    {
        $tmp_data = $data;
        $code_ids = RecallServer::getCodeByGroupId($data['recall_code_group_id']);
        $ver_ids = RecallServer::getLinkByGroupId($data['recall_ver_group_id'],'ver_id');

        $tmp_data['recall_code_id'] = implode(',',$code_ids);
        $tmp_data['recall_ver_id'] = implode(',',$ver_ids);
        $tmp_data['exec_date'] = date('Y-m-d');
        $tmp_data['add_time'] = time();
        $tmp_data['plan_id'] = $data['id'];
//        $tmp_data['platform_id'] = $data['id'];
        return $tmp_data;
    }

    public static function dealParams2($data)
    {
        $tmp_data = $data;

        $tmp_data['plan_log_id'] = $data['id'];
//        $tmp_data['last_login_time'] = $data['last_login_time'];
        $tmp_data['add_time'] = time();
//        $tmp_data['plan_id'] = $data['id'];
//        $tmp_data['platform_id'] = $data['id'];
        return $tmp_data;
    }


    public static function sendRecallPlanPeopleLog($data)
    {
        $result = ['code'=>1, 'data'=>[]];
        $where = [];
        $exec_date = date('Y-m-d');
        $where = ['status'=>1,'execute_type'=>1,'exec_date'=>$exec_date];
        $plan_logs = RecallPlanLogSqlServer::getInfo($where);

        foreach($plan_logs as $k=>$v){
            $tmp_where['plan_log_id'] = $v['id'];
            $tmp_where['platform_id'] = $v['platform_id'];
            $tmp_where['status'] = 0;
            $plan_logs = RecallPlanPeopleLogSqlServer::getInfo($tmp_where);

            foreach($plan_logs as $k1=>&$v1){
                $v1['phone'] = ApiUserInfoSecurity::decrypt($v1['phone']);
                $v1['status'] = 1;
            }
            //todo
//            $send_res = SendNuoer::sendPhone($plan_logs);

            if(true){

                RecallPlanPeopleLogSqlServer::update($plan_logs);
            }


        }

        return $result;

    }

    public static function sendRecallPlanLog($data)
    {
        $result = ['code'=>1, 'data'=>[]];

        $exec_date = date('Y-m-d');
        $where = ['status'=>1,'execute_type'=>1,'exec_date'=>$exec_date];
        $plan_logs = RecallPlanLogSqlServer::getInfo($where);

        foreach($plan_logs as $k=>$v)
        {

            $platform = Common::getPlatformInfoByPlatformIdAndCache($v['platform_id']);

            $tmp_data['exec']                   = $v['exec_date'];
            $tmp_data['plan_log_id']            = $v['id'];
            $tmp_data['platform']               = $platform['platform_suffix'];
            $tmp_data['title']                  = $v['title'];
            $tmp_data['loss_product_name']      = GameProductServer::getUpProductById($v['platform_id'],$v['loss_up_id']);
            $tmp_data['recall_product_name']    = GameProductServer::getUpProductById($v['platform_id'],$v['recall_up_id']);
            $tmp_data['min_account_money']      = $v['min_account_money'];
            $tmp_data['max_account_money']      = $v['max_account_money'];
            $tmp_data['min_loss_product_money'] = $v['min_loss_product_money'];
            $tmp_data['max_loss_product_money'] = $v['max_loss_product_money'];
            $tmp_data['min_level']              = $v['min_level'];
            $tmp_data['max_level']              = $v['max_level'];
            $tmp_data['send_num']               = $v['send_num'];
            $tmp_data['recall_ver']             = $v['recall_ver_id'];
            $tmp_data['recall_code']            = $v['recall_code_id'];
            $tmp_data['interval_day']           = $v['interval_day'];

//            $res = SendNuoer::sendPlan($tmp_data);
        }

        return $result;
    }


}