<?php
/**
 * Created by PhpStorm.
 * User: crosstime
 * Date: 2018/8/14
 * Time: 下午5:31
 */
namespace common\sql_server;


use common\model\db_customer\LossUser;
use common\model\db_customer\LossUserSub;

class LossUserSqlServer extends BaseSqlServer
{

    public static function insertInfo($data)
    {
        $time = time();
        $model = new LossUser();
        $sql = "insert ignore  into loss_user (`platform_id`,`phone`,`udid`,`last_login_time`,`reg_time`,`add_time`) value
                            ({$data['platform_id']},'{$data['mobile']}','{$data['udid']}',{$data['login_date']},{$data['reg_time']},{$time})";
        $res = $model->execute($sql);
        return $res;
    }

    public static function insertInfoSub($data)
    {
        $time = time();
        $model = new LossUserSub();
        $sql = "insert ignore into loss_user_sub (`platform_id`,`phone`,`udid`,`uid`,`str_uid`,`username`,`add_time`) value
                            ({$data['platform_id']},'{$data['mobile']}','{$data['udid']}','{$data['uid']}','{$data['uid']}','{$data['uname']}','{$time}')";
        $res = $model->execute($sql);
        return $res;
    }

    public static function update($data)
    {
        $model = new LossUserSub();
        $res = $model->isUpdate(1)->update($data);
        return $res;
    }

    public static function getInfo($where)
    {
        $model = new LossUser();
        $res = $model->where($where)->select();
        return $res;
    }

    public static function getSubInfo($where)
    {
        $model = new LossUserSub();
        $res = $model->where($where)->select();
        return $res;
    }

    public static function getCount($where)
    {
        $model = new LossUser();
        $res = $model->where($where)->count();
        return $res;
    }

    //判断全账号充值、发送次数、间隔日期
    public static function screenUidsByLossUser($where)
    {

        $date = date('Y-m-d');
        $interval_day_time = mktime(0,0,0,date('m'),date('d')-$where['interval_day'],date('Y'));

        $where = "where 1=1 and platform_id = {$where['platform_id']} 
                and account_money >= {$where['min_account_money']} and account_money <= {$where['max_account_money']} 
                and send_num > {$where['send_num']} and last_send_time >={$interval_day_time} ";
        $model = new LossUser();

        $sql = "select * from loss_user {$where} ";

        $count = self::getCount($sql);

        //兼容数据过多时分批取出
        if($count >= 5000){
            $tmp_data = [];

            $num = ceil($count/5000);

            $cache_name_last_id = 'screen_uids_by_loss_user_last_id';



            for($i = 0;$i < $num;$i++){

                $last_id = cache($cache_name_last_id);

                if(!empty($last_id)){
                    $last_id = 0;
                }

                $where .= "id >{$last_id}";

                $sql =  "select * from loss_user {$where} order by id asc limit 5000";

                $res = $model->query($sql);

                array_merge($tmp_data,$res);

                $last_id = $res[count($res)-1]['id'];

                cache($cache_name_last_id,$last_id);


            }

           $res = $tmp_data;

       }else{
           $res = $model->query($sql);
       }


        return $res;


    }



    //判断流失产品充值
    public static function screenUidsByRecharge($where)
    {

    }

}