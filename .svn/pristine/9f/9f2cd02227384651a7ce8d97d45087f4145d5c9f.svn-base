<?php

use common\GamekeySignBase\GamekeySignBase;

class wyxx extends GamekeySignBase
{

    public $return_form = 2; //判断是否需要返回转接口的所有数据

    private $secret = 'c930ea7686f0fdc5c849a59167608fa2';

    public $uid_to_sdkid_url = "https://apisdk.gaore.com/channel/get_zhangwan_uid.php";

    public $sdkid_to_uid_url = "https://apisdk.gaore.com/channel/get_zhangwan_uid.php";


	public function __construct(){

    }

    #根据cp给的聚合uid换成平台自身的uid，用于信息推送时候替换成自己平台的uid,type1代表掌玩聚合id换平台id，2代表平台id换掌玩聚合id
    public function sdkid_to_uid_url($sdkid){

	    if(empty($sdkid)){
	        return false;
        }

        $sdkid_info = self::bxChangeYouyu($sdkid);

        $sdkid = $sdkid_info['uid'];
        $type = 2;
        $mtype = 154;
        $time = time();
        $key = $this->secret;
        $sign = md5($sdkid.$mtype.$type.$time.$key);
        $post_data = [
            'user_id'  => $sdkid,
            'mtype'  => $mtype,
            'type' => $type,
            'time' => $time,
            'sign' => $sign

        ];

	    $res = self::fetchUrl($this->sdkid_to_uid_url.'?'.http_build_query($post_data));
        $res = json_decode($res,1);

        $return = '';
        if(isset($res['code']) && $res['code'] == 1){

            if($res['data']['user_id'] == $sdkid){
                $return = [];
                $return['openid'] = $res['data']['openid'];

                if($sdkid_info['channel'] == 10){

                    $return['tkey'] = 'youyu';
                }
            }else{
                $return = '';
            }


            return $return;

        }else{
            return false;
        }

    }


    private function bxChangeYouyu($sdkid)
    {
        $secret = '3zNHnfaSawJRoxSdmiPQ2VdxjfUH5kW2';
        $time = time();


        $sign =md5($sdkid.$time.$secret);

        $post_data = [
            'uid'  => $sdkid,
            'type' => 2,
            'time' => $time,
            'sign' => $sign

        ];
        $url = 'http://api.e7j.cn/activity/bx/index';
        $res = self::fetchUrl($url.'?'.http_build_query($post_data));
        $res = json_decode($res,1);
        if(isset($res['state']['code']) && $res['state']['code'] == 1 && isset($res['data'][0]['cooperationID'])){
            $return['uid'] = isset($res['data'][0]['uid']) ? $res['data'][0]['uid'] : $sdkid;
            $return['channel'] = isset($res['data'][0]['cooperationID']) ? $res['data'][0]['cooperationID'] : $sdkid;
        }

        return $return;

    }


    #根据平台自身的uid换cp给的聚合uid，用于调用cp封禁、禁言接口
    public function uid_to_sdkid_url($sdkid){
        if(empty($sdkid)){
            return false;
        }
        $sdkid_info = self::bxChangeYouyu($sdkid);
        $sdkid = $sdkid_info['uid'];
        $time = time();
        $key = $this->secret;
        $sign = md5($sdkid.'154'.'1'.$time.$key);
        $post_data = [
            'user_id'  => $sdkid,
            'mtype'  => 154,
            'type' => 1,
            'time' => $time,
            'sign' => $sign

        ];

        $res = self::fetchUrl($this->sdkid_to_uid_url.'?'.http_build_query($post_data));
        $res = json_decode($res,1);

        if(isset($res['code']) && $res['code'] == 1){
//            $tmp_info = $res['data']['success'][0];
            if($res['data']['user_id'] == $sdkid){
                $id = $res['data']['openid'];
            }else{
                $id = '';
            }

            return $id;

        }else{
            return false;
        }
    }

    public function afterChangeData($chat_info)
    {
        $chat_info['tkey'] = 'youyu';
        return $chat_info;
    }



}